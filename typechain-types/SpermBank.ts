/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SpermBankInterface extends Interface {
  getFunction(
    nameOrSignature: "admin" | "donors" | "getDonorInfo" | "registerDonor"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DonorRegistered"): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "donors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getDonorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDonor",
    values: [string, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDonorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDonor",
    data: BytesLike
  ): Result;
}

export namespace DonorRegisteredEvent {
  export type InputTuple = [donorAddress: AddressLike, name: string];
  export type OutputTuple = [donorAddress: string, name: string];
  export interface OutputObject {
    donorAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SpermBank extends BaseContract {
  connect(runner?: ContractRunner | null): SpermBank;
  waitForDeployment(): Promise<this>;

  interface: SpermBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  donors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, string, boolean] & {
        donorAddress: string;
        name: string;
        age: bigint;
        bloodType: string;
        geneticInfoHash: string;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getDonorInfo: TypedContractMethod<
    [_donorAddress: AddressLike],
    [[string, bigint, string, string]],
    "view"
  >;

  registerDonor: TypedContractMethod<
    [
      _name: string,
      _age: BigNumberish,
      _bloodType: string,
      _geneticInfoHash: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, string, boolean] & {
        donorAddress: string;
        name: string;
        age: bigint;
        bloodType: string;
        geneticInfoHash: string;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonorInfo"
  ): TypedContractMethod<
    [_donorAddress: AddressLike],
    [[string, bigint, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDonor"
  ): TypedContractMethod<
    [
      _name: string,
      _age: BigNumberish,
      _bloodType: string,
      _geneticInfoHash: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DonorRegistered"
  ): TypedContractEvent<
    DonorRegisteredEvent.InputTuple,
    DonorRegisteredEvent.OutputTuple,
    DonorRegisteredEvent.OutputObject
  >;

  filters: {
    "DonorRegistered(address,string)": TypedContractEvent<
      DonorRegisteredEvent.InputTuple,
      DonorRegisteredEvent.OutputTuple,
      DonorRegisteredEvent.OutputObject
    >;
    DonorRegistered: TypedContractEvent<
      DonorRegisteredEvent.InputTuple,
      DonorRegisteredEvent.OutputTuple,
      DonorRegisteredEvent.OutputObject
    >;
  };
}
