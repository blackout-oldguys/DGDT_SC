/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SpermBank {
  export type BloodInfoStruct = {
    bloodType: string;
    hav: boolean;
    hbv: boolean;
    hcv: boolean;
    venerealDisease: boolean;
  };

  export type BloodInfoStructOutput = [
    bloodType: string,
    hav: boolean,
    hbv: boolean,
    hcv: boolean,
    venerealDisease: boolean
  ] & {
    bloodType: string;
    hav: boolean;
    hbv: boolean;
    hcv: boolean;
    venerealDisease: boolean;
  };

  export type SemenTestInfoStruct = {
    semenVolume: BigNumberish;
    spermCount: BigNumberish;
    spermMotility: string;
    spermShape: string;
  };

  export type SemenTestInfoStructOutput = [
    semenVolume: bigint,
    spermCount: bigint,
    spermMotility: string,
    spermShape: string
  ] & {
    semenVolume: bigint;
    spermCount: bigint;
    spermMotility: string;
    spermShape: string;
  };

  export type MedicalHistoryStruct = {
    mentalRetardation: boolean;
    mentalIllness: boolean;
    epilepsy: boolean;
    otherConditions: string[];
  };

  export type MedicalHistoryStructOutput = [
    mentalRetardation: boolean,
    mentalIllness: boolean,
    epilepsy: boolean,
    otherConditions: string[]
  ] & {
    mentalRetardation: boolean;
    mentalIllness: boolean;
    epilepsy: boolean;
    otherConditions: string[];
  };

  export type PastHistoryStruct = {
    drugUse: boolean;
    otherConditions: string[];
  };

  export type PastHistoryStructOutput = [
    drugUse: boolean,
    otherConditions: string[]
  ] & { drugUse: boolean; otherConditions: string[] };

  export type FamilyHistoryStruct = { relation: string; condition: string };

  export type FamilyHistoryStructOutput = [
    relation: string,
    condition: string
  ] & { relation: string; condition: string };

  export type InterviewInfoStruct = {
    medicalHistory: SpermBank.MedicalHistoryStruct;
    pastHistory: SpermBank.PastHistoryStruct;
    geneticDisorders: string[];
    familyHistory: SpermBank.FamilyHistoryStruct[];
  };

  export type InterviewInfoStructOutput = [
    medicalHistory: SpermBank.MedicalHistoryStructOutput,
    pastHistory: SpermBank.PastHistoryStructOutput,
    geneticDisorders: string[],
    familyHistory: SpermBank.FamilyHistoryStructOutput[]
  ] & {
    medicalHistory: SpermBank.MedicalHistoryStructOutput;
    pastHistory: SpermBank.PastHistoryStructOutput;
    geneticDisorders: string[];
    familyHistory: SpermBank.FamilyHistoryStructOutput[];
  };

  export type PhysicalInfoStruct = {
    height: BigNumberish;
    weight: BigNumberish;
    bodyType: string;
    ethnicity: string;
    personality: string;
    education: string;
    religion: string;
  };

  export type PhysicalInfoStructOutput = [
    height: bigint,
    weight: bigint,
    bodyType: string,
    ethnicity: string,
    personality: string,
    education: string,
    religion: string
  ] & {
    height: bigint;
    weight: bigint;
    bodyType: string;
    ethnicity: string;
    personality: string;
    education: string;
    religion: string;
  };

  export type DonorStruct = {
    donorAddress: AddressLike;
    name: string;
    age: BigNumberish;
    bloodInfo: SpermBank.BloodInfoStruct;
    semenTestInfo: SpermBank.SemenTestInfoStruct;
    interviewInfo: SpermBank.InterviewInfoStruct;
    physicalInfo: SpermBank.PhysicalInfoStruct;
    isRegistered: boolean;
  };

  export type DonorStructOutput = [
    donorAddress: string,
    name: string,
    age: bigint,
    bloodInfo: SpermBank.BloodInfoStructOutput,
    semenTestInfo: SpermBank.SemenTestInfoStructOutput,
    interviewInfo: SpermBank.InterviewInfoStructOutput,
    physicalInfo: SpermBank.PhysicalInfoStructOutput,
    isRegistered: boolean
  ] & {
    donorAddress: string;
    name: string;
    age: bigint;
    bloodInfo: SpermBank.BloodInfoStructOutput;
    semenTestInfo: SpermBank.SemenTestInfoStructOutput;
    interviewInfo: SpermBank.InterviewInfoStructOutput;
    physicalInfo: SpermBank.PhysicalInfoStructOutput;
    isRegistered: boolean;
  };
}

export interface SpermBankInterface extends Interface {
  getFunction(
    nameOrSignature: "admin" | "donors" | "getDonorInfo" | "registerDonor"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DonorRegistered"): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "donors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getDonorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDonor",
    values: [
      string,
      BigNumberish,
      SpermBank.BloodInfoStruct,
      SpermBank.SemenTestInfoStruct,
      SpermBank.InterviewInfoStruct,
      SpermBank.PhysicalInfoStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDonorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDonor",
    data: BytesLike
  ): Result;
}

export namespace DonorRegisteredEvent {
  export type InputTuple = [donorAddress: AddressLike, name: string];
  export type OutputTuple = [donorAddress: string, name: string];
  export interface OutputObject {
    donorAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SpermBank extends BaseContract {
  connect(runner?: ContractRunner | null): SpermBank;
  waitForDeployment(): Promise<this>;

  interface: SpermBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  donors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        bigint,
        SpermBank.BloodInfoStructOutput,
        SpermBank.SemenTestInfoStructOutput,
        SpermBank.InterviewInfoStructOutput,
        SpermBank.PhysicalInfoStructOutput,
        boolean
      ] & {
        donorAddress: string;
        name: string;
        age: bigint;
        bloodInfo: SpermBank.BloodInfoStructOutput;
        semenTestInfo: SpermBank.SemenTestInfoStructOutput;
        interviewInfo: SpermBank.InterviewInfoStructOutput;
        physicalInfo: SpermBank.PhysicalInfoStructOutput;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getDonorInfo: TypedContractMethod<
    [_donorAddress: AddressLike],
    [SpermBank.DonorStructOutput],
    "view"
  >;

  registerDonor: TypedContractMethod<
    [
      _name: string,
      _age: BigNumberish,
      _bloodInfo: SpermBank.BloodInfoStruct,
      _semenTestInfo: SpermBank.SemenTestInfoStruct,
      _interviewInfo: SpermBank.InterviewInfoStruct,
      _physicalInfo: SpermBank.PhysicalInfoStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        bigint,
        SpermBank.BloodInfoStructOutput,
        SpermBank.SemenTestInfoStructOutput,
        SpermBank.InterviewInfoStructOutput,
        SpermBank.PhysicalInfoStructOutput,
        boolean
      ] & {
        donorAddress: string;
        name: string;
        age: bigint;
        bloodInfo: SpermBank.BloodInfoStructOutput;
        semenTestInfo: SpermBank.SemenTestInfoStructOutput;
        interviewInfo: SpermBank.InterviewInfoStructOutput;
        physicalInfo: SpermBank.PhysicalInfoStructOutput;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDonorInfo"
  ): TypedContractMethod<
    [_donorAddress: AddressLike],
    [SpermBank.DonorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDonor"
  ): TypedContractMethod<
    [
      _name: string,
      _age: BigNumberish,
      _bloodInfo: SpermBank.BloodInfoStruct,
      _semenTestInfo: SpermBank.SemenTestInfoStruct,
      _interviewInfo: SpermBank.InterviewInfoStruct,
      _physicalInfo: SpermBank.PhysicalInfoStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DonorRegistered"
  ): TypedContractEvent<
    DonorRegisteredEvent.InputTuple,
    DonorRegisteredEvent.OutputTuple,
    DonorRegisteredEvent.OutputObject
  >;

  filters: {
    "DonorRegistered(address,string)": TypedContractEvent<
      DonorRegisteredEvent.InputTuple,
      DonorRegisteredEvent.OutputTuple,
      DonorRegisteredEvent.OutputObject
    >;
    DonorRegistered: TypedContractEvent<
      DonorRegisteredEvent.InputTuple,
      DonorRegisteredEvent.OutputTuple,
      DonorRegisteredEvent.OutputObject
    >;
  };
}
